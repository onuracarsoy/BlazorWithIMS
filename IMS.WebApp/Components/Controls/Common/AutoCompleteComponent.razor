<div class="form-group">
    <label for="search">@Label</label>
    <input type="text" class="form-control" @bind-value="userInput" @bind-value:event="oninput" @onkeyup="OnKeyup" />
</div>

@if (searchResults is not null && searchResults.Count > 0)
{
    <div class="search-result">
        <ul>
            @{
                int itemIndex = 0;


                foreach (var item in searchResults)
                {
                    <li @key="item.Id" class="@(itemIndex == currenItemIndex?"selected":"")" @onclick="()=> HandleSelectItem(item)">
                        @item.Name
                    </li>
                    itemIndex++;
                }

            }
        </ul>
    </div>

}

@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public Func<string, Task<List<ItemViewModel>>>? SearchFunction { get; set; }

    [Parameter]
    public EventCallback<ItemViewModel> OnItemSelected { get; set; }

    private List<ItemViewModel>? searchResults = null;

    private ItemViewModel? selectedItem = null;

    private string _userInput = string.Empty;
    public string userInput
    {
        get => _userInput;  set
        {
            _userInput = value;
            if (!string.IsNullOrWhiteSpace(_userInput) && SearchFunction is not null)
            {
                ViewItemAsync();
            }

        }
    }

    private ItemViewModel? currentItem = null;
    private int currenItemIndex = -1;

    private async Task ViewItemAsync()
    {
        if(SearchFunction is not null)
        {
            searchResults = await SearchFunction(_userInput);

            StateHasChanged();
        }
    }

    private void HandleSelectItem(ItemViewModel? item)
    {
        CleatHighlight();
        if(item != null)
        {
            selectedItem = item;
            searchResults = null;
            userInput = item?.Name ?? string.Empty;

            OnItemSelected.InvokeAsync(item);
        }
      
    }

    private void CleatHighlight()
    {
        searchResults = null;
        currentItem = null;
        currenItemIndex = -1;
    }

    private void OnKeyup(KeyboardEventArgs e)
    {

        if (searchResults is not null && searchResults.Count > 0 && (e.Code == "ArrowDown" || e.Code == "ArrowUp"))
        {

            if (e.Code == "ArrowDown" && currenItemIndex < searchResults.Count - 1)
            {
                currentItem = searchResults[++currenItemIndex];
            }
            else if (e.Code == "ArrowUp")
            {
                if (currenItemIndex > 0)
                {
                    currentItem = searchResults[--currenItemIndex];
                }
                else
                {
                    currentItem = null;
                    currenItemIndex = -1;
                }
            }

        }
        else if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            HandleSelectItem(currentItem);
        }
    }

    public class ItemViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }
}

