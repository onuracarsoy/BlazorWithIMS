@page "/addinventory"
@inject NavigationManager NavigationManager
@attribute [Authorize(Policy ="Inventory")]

@inject IAddInventoryUseCase addInventoryUseCase
<EditForm Model="inventory" FormName="formInventory" OnValidSubmit="Save">
    <DataAnnotationsValidator />
   <div class="form-group">
       <label for="name">Ad</label>
        <InputText id="name" class="form-control" @bind-Value="inventory.InventoryName"/>
        <ValidationMessage For="@(() => inventory.InventoryName)" />
   </div>
    <div class="form-group">
        <label for="quantity">Miktar</label>
        <InputNumber id="quantity" class="form-control" @bind-Value="inventory.InventoryQuantity" />
        <ValidationMessage For="@(() => inventory.InventoryQuantity)" />
    </div>
    <div class="form-group">
        <label for="price">Fiyat</label>
        <InputNumber id="price" class="form-control" @bind-Value="inventory.InventoryPrice" />
        <ValidationMessage For="@(() => inventory.InventoryPrice)" />
    </div>
    <br/>
    <button type="submit" class="btn btn-success">Kaydet</button>
    <a href="/inventories" class="btn btn-danger">İptal</a>

</EditForm>
@code {
    [SupplyParameterFromForm]
    private InventoryViewModel inventory { get; set; } = new InventoryViewModel();

    private async Task Save()
    {
        var inv = new Inventory
        {
            InventoryId = inventory.InventoryId,
            InventoryName = inventory.InventoryName,
            InventoryPrice = inventory.InventoryPrice,
            InventoryQuantity = inventory.InventoryQuantity
        };
       await addInventoryUseCase.ExecuteAsync(inv);

       NavigationManager.NavigateTo("/inventories");
    }
}
